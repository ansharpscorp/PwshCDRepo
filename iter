from typing import Iterable, Optional
from azure.storage.blob import ContainerClient

def iter_json_blobs_paged(
    container_client: ContainerClient,
    prefix: Optional[str] = None,
    page_size: int = 200,
    timeout: int = 60,
    max_pages: Optional[int] = None,
) -> Iterable[str]:
    """
    Version-tolerant blob lister:
      - Attempts to pass timeout to list_blobs; if unsupported, retries w/o it.
      - Tries page-size knobs in this order: results_per_page -> max_results -> (none).
      - Yields only *.json blob names.
    """
    # 1) list_blobs with timeout if supported
    try:
        pager = container_client.list_blobs(name_starts_with=prefix, timeout=timeout)
    except TypeError:
        pager = container_client.list_blobs(name_starts_with=prefix)

    # 2) by_page with best-available page size param
    page_iter = None
    for kw in ({"results_per_page": page_size}, {"max_results": page_size}, {}):
        try:
            page_iter = pager.by_page(**kw)
            break
        except TypeError:
            continue
    if page_iter is None:
        # Extremely old SDK fallback
        page_iter = pager.by_page()

    # 3) Iterate pages with optional cap
    page_idx = 0
    for page in page_iter:
        page_idx += 1
        for blob in page:
            name = getattr(blob, "name", "")
            if isinstance(name, str) and name.lower().endswith(".json"):
                yield name
        if max_pages is not None and page_idx >= max_pages:
            break
